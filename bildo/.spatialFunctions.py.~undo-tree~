(undo-tree-save-format-version . 1)
"5777c29fc3b23f81eb7b09f152626604af0d7564"
[nil nil nil nil (26063 7810 323668 105000) 0 nil]
([nil nil ((#("# import bildov2 as bildo
" 0 25 (face tree-sitter-hl-face:comment fontified t) 25 26 (fontified t)) . 190) (undo-tree-id351 . -16) (undo-tree-id352 . -16) (undo-tree-id353 . -16) (undo-tree-id354 . -16) (undo-tree-id355 . -16) (undo-tree-id356 . -25) 206 (t 25984 6263 73334 684000)) nil (26063 7810 323667 288000) 0 nil])
([nil nil ((#("bildov2 as" 0 8 (fontified t) 8 10 (face tree-sitter-hl-face:keyword fontified t)) . 33198) (undo-tree-id34 . -9) (undo-tree-id35 . -9) (undo-tree-id36 . -9) (undo-tree-id37 . -6) (undo-tree-id38 . -6) (undo-tree-id39 . -6) (undo-tree-id40 . -6) (undo-tree-id41 . -6) (undo-tree-id42 . -6) (undo-tree-id43 . -6) (undo-tree-id44 . -7) (undo-tree-id45 . -7) (undo-tree-id46 . -7) (undo-tree-id47 . -7) (undo-tree-id48 . -7) (undo-tree-id49 . -7) (undo-tree-id50 . -7) (undo-tree-id51 . -7) (undo-tree-id52 . -7) (undo-tree-id53 . -7) (undo-tree-id54 . -7) (undo-tree-id55 . -7) (undo-tree-id56 . -7) (undo-tree-id57 . -7) (undo-tree-id58 . -7) (undo-tree-id59 . -7) (undo-tree-id60 . -7) (undo-tree-id61 . -7) (undo-tree-id62 . -7) (undo-tree-id63 . -7) (undo-tree-id64 . -7) (undo-tree-id65 . -7) (undo-tree-id66 . -7) (undo-tree-id67 . -7) (undo-tree-id68 . -7) (undo-tree-id69 . -7) (undo-tree-id70 . -7) (undo-tree-id71 . -7) (undo-tree-id72 . -7) (undo-tree-id73 . -7) (undo-tree-id74 . -7) (undo-tree-id75 . -7) (undo-tree-id76 . -7) (undo-tree-id77 . -7) (undo-tree-id78 . -7) (undo-tree-id79 . -7) (undo-tree-id80 . -7) (undo-tree-id81 . -7) (undo-tree-id82 . -7) (undo-tree-id83 . -7) (undo-tree-id84 . -7) (undo-tree-id85 . -7) (undo-tree-id86 . -7) (undo-tree-id87 . -7) (undo-tree-id88 . -7) (undo-tree-id89 . -7) (undo-tree-id90 . -7) (undo-tree-id91 . -7) (undo-tree-id92 . -7) (undo-tree-id93 . -7) (undo-tree-id94 . -7) (undo-tree-id95 . -7) (undo-tree-id96 . -7) (undo-tree-id97 . -7) (undo-tree-id98 . -7) (undo-tree-id99 . -7) (undo-tree-id100 . -7) (undo-tree-id101 . -7) (undo-tree-id102 . -8) (undo-tree-id103 . -8) (undo-tree-id104 . -8) (undo-tree-id105 . -8) (undo-tree-id106 . -8) (undo-tree-id107 . -8) (undo-tree-id108 . -8) (undo-tree-id109 . -8) (undo-tree-id110 . -8) (undo-tree-id111 . -8) (undo-tree-id112 . -8) (undo-tree-id113 . -8) (undo-tree-id114 . -8) (undo-tree-id115 . -8) (undo-tree-id116 . -8) (undo-tree-id117 . -8) (undo-tree-id118 . -8) (undo-tree-id119 . -8) (undo-tree-id120 . -8) (undo-tree-id121 . -8) (undo-tree-id122 . -8) (undo-tree-id123 . -8) (undo-tree-id124 . -8) (undo-tree-id125 . -8) (undo-tree-id126 . -8) (undo-tree-id127 . -8) (undo-tree-id128 . -8) (undo-tree-id129 . -8) (undo-tree-id130 . -8) (undo-tree-id131 . -8) (undo-tree-id132 . -8) (undo-tree-id133 . -8) (undo-tree-id134 . -8) (undo-tree-id135 . -8) (undo-tree-id136 . -8) (undo-tree-id137 . -8) (undo-tree-id138 . -8) (undo-tree-id139 . 2) (undo-tree-id140 . -7) (undo-tree-id141 . -7) (undo-tree-id142 . -7) (undo-tree-id143 . -7) (undo-tree-id144 . -7) (undo-tree-id145 . -7) (undo-tree-id146 . -7) (undo-tree-id147 . -7) (undo-tree-id148 . -7) (undo-tree-id149 . -7) (undo-tree-id150 . -7) (undo-tree-id151 . -7) (undo-tree-id152 . -7) (undo-tree-id153 . -7) (undo-tree-id154 . -7) (undo-tree-id155 . -7) (undo-tree-id156 . -7) (undo-tree-id157 . -7) (undo-tree-id158 . -7) (undo-tree-id159 . -7) (undo-tree-id160 . -7) (undo-tree-id161 . -7) (undo-tree-id162 . -7) (undo-tree-id163 . -7) (undo-tree-id164 . -7) (undo-tree-id165 . -7) (undo-tree-id166 . -7) (undo-tree-id167 . -7) (undo-tree-id168 . -7) (undo-tree-id169 . -7) (undo-tree-id170 . -6) (undo-tree-id171 . -6) (undo-tree-id172 . -6) (undo-tree-id173 . -6) (undo-tree-id174 . -6) (undo-tree-id175 . -6) (undo-tree-id176 . -6) (undo-tree-id177 . -6) (undo-tree-id178 . -6) (undo-tree-id179 . -6) (undo-tree-id180 . -6) (undo-tree-id181 . -6) (undo-tree-id182 . -6) (undo-tree-id183 . -6) (undo-tree-id184 . -6) (undo-tree-id185 . -6) (undo-tree-id186 . -6) (undo-tree-id187 . -6) (undo-tree-id188 . -6) (undo-tree-id189 . -6) (undo-tree-id190 . -6) (undo-tree-id191 . -6) (undo-tree-id192 . -5) (undo-tree-id193 . -5) (undo-tree-id194 . -5) (undo-tree-id195 . -5) (undo-tree-id196 . -5) (undo-tree-id197 . -5) (undo-tree-id198 . -5) (undo-tree-id199 . -5) (undo-tree-id200 . -4) (undo-tree-id201 . -4) (undo-tree-id202 . -4) (undo-tree-id203 . -4) (undo-tree-id204 . -4) (undo-tree-id205 . -4) (undo-tree-id206 . -4) (undo-tree-id207 . -4) (undo-tree-id208 . -3) (undo-tree-id209 . -3) (undo-tree-id210 . -3) (undo-tree-id211 . -3) (undo-tree-id212 . -3) (undo-tree-id213 . -3) (undo-tree-id214 . -3) (undo-tree-id215 . -3) (undo-tree-id216 . -2) (undo-tree-id217 . -2) (undo-tree-id218 . -2) (undo-tree-id219 . -2) (undo-tree-id220 . -2) (undo-tree-id221 . -2) (undo-tree-id222 . -2) (undo-tree-id223 . -2) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -7) (undo-tree-id254 . -7) (undo-tree-id255 . -7) (undo-tree-id256 . -7) (undo-tree-id257 . -7) (undo-tree-id258 . -7) (undo-tree-id259 . -7) (undo-tree-id260 . -7) (undo-tree-id261 . -7) (undo-tree-id262 . -7) (undo-tree-id263 . -7) (undo-tree-id264 . -7) (undo-tree-id265 . -7) (undo-tree-id266 . -7) (undo-tree-id267 . -7) (undo-tree-id268 . -7) (undo-tree-id269 . -7) (undo-tree-id270 . -7) (undo-tree-id271 . -7) (undo-tree-id272 . -7) (undo-tree-id273 . -7) (undo-tree-id274 . -7) (undo-tree-id275 . -7) (undo-tree-id276 . -7) (undo-tree-id277 . -7) (undo-tree-id278 . -7) (undo-tree-id279 . -7) (undo-tree-id280 . -7) (undo-tree-id281 . -7) (undo-tree-id282 . -7) (undo-tree-id283 . -7) (undo-tree-id284 . -7) (undo-tree-id285 . -7) (undo-tree-id286 . -7) (undo-tree-id287 . -7) (undo-tree-id288 . -7) (undo-tree-id289 . -8) (undo-tree-id290 . -8) (undo-tree-id291 . -8) (undo-tree-id292 . -8) (undo-tree-id293 . -8) (undo-tree-id294 . -8) (undo-tree-id295 . -8) (undo-tree-id296 . -8) (undo-tree-id297 . -8) (undo-tree-id298 . -8) (undo-tree-id299 . -8) (undo-tree-id300 . -8) (undo-tree-id301 . -8) (undo-tree-id302 . -8) (undo-tree-id303 . -8) (undo-tree-id304 . -8) (undo-tree-id305 . -8) (undo-tree-id306 . -8) (undo-tree-id307 . -8) (undo-tree-id308 . -8) (undo-tree-id309 . -8) (undo-tree-id310 . -8) (undo-tree-id311 . -9) (undo-tree-id312 . -9) (undo-tree-id313 . -9) (undo-tree-id314 . -9) (undo-tree-id315 . -9) (undo-tree-id316 . -9) (undo-tree-id317 . -9) (undo-tree-id318 . -9) (undo-tree-id319 . -9) (undo-tree-id320 . -9) (undo-tree-id321 . -9) (undo-tree-id322 . -9) (undo-tree-id323 . -9) (undo-tree-id324 . -9) (undo-tree-id325 . -9) (undo-tree-id326 . -9) (undo-tree-id327 . -9) (undo-tree-id328 . -9) (undo-tree-id329 . -9) (undo-tree-id330 . -9) (undo-tree-id331 . -9) (undo-tree-id332 . -9) (undo-tree-id333 . -9) (undo-tree-id334 . -9) (undo-tree-id335 . -9) (undo-tree-id336 . -9) (undo-tree-id337 . -9) (undo-tree-id338 . -9) (undo-tree-id339 . -9) (undo-tree-id340 . -9) (undo-tree-id341 . -9) (undo-tree-id342 . -9) (undo-tree-id343 . -7) (undo-tree-id344 . -9) (undo-tree-id345 . -9) (undo-tree-id346 . -9) (undo-tree-id347 . -9) (undo-tree-id348 . -9) (undo-tree-id349 . -9) (undo-tree-id350 . -10) 33207) nil (26063 7810 323661 856000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -33198) (undo-tree-id0 . 1) (undo-tree-id1 . 1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) 33199) nil (26063 7810 323401 52000) 0 nil])
([nil nil ((#("bildov2 as" 0 8 (fontified t) 8 10 (face tree-sitter-hl-face:keyword fontified t)) . 47163) (undo-tree-id377 . -9) (undo-tree-id378 . -9) (undo-tree-id379 . -9) (undo-tree-id380 . 2) (undo-tree-id381 . -8) (undo-tree-id382 . -8) (undo-tree-id383 . -8) (undo-tree-id384 . -8) (undo-tree-id385 . -8) (undo-tree-id386 . -8) (undo-tree-id387 . -8) (undo-tree-id388 . -8) (undo-tree-id389 . -8) (undo-tree-id390 . -8) (undo-tree-id391 . -8) (undo-tree-id392 . -8) (undo-tree-id393 . -8) (undo-tree-id394 . -8) (undo-tree-id395 . -8) (undo-tree-id396 . -8) (undo-tree-id397 . -8) (undo-tree-id398 . -8) (undo-tree-id399 . -8) (undo-tree-id400 . -8) (undo-tree-id401 . -8) (undo-tree-id402 . -8) (undo-tree-id403 . -8) (undo-tree-id404 . -8) (undo-tree-id405 . -8) (undo-tree-id406 . -8) (undo-tree-id407 . -8) (undo-tree-id408 . -8) (undo-tree-id409 . -8) (undo-tree-id410 . -8) (undo-tree-id411 . -8) (undo-tree-id412 . -8) (undo-tree-id413 . -8) (undo-tree-id414 . -8) (undo-tree-id415 . -8) (undo-tree-id416 . -7) (undo-tree-id417 . -7) (undo-tree-id418 . -7) (undo-tree-id419 . -7) (undo-tree-id420 . -7) (undo-tree-id421 . -7) (undo-tree-id422 . -7) (undo-tree-id423 . -7) (undo-tree-id424 . -7) (undo-tree-id425 . -7) (undo-tree-id426 . -7) (undo-tree-id427 . -7) (undo-tree-id428 . -7) (undo-tree-id429 . -7) (undo-tree-id430 . -7) (undo-tree-id431 . -7) (undo-tree-id432 . -7) (undo-tree-id433 . -7) (undo-tree-id434 . -7) (undo-tree-id435 . -7) (undo-tree-id436 . -7) (undo-tree-id437 . -7) (undo-tree-id438 . -7) (undo-tree-id439 . -7) (undo-tree-id440 . -7) (undo-tree-id441 . -7) (undo-tree-id442 . -7) (undo-tree-id443 . -7) (undo-tree-id444 . -7) (undo-tree-id445 . -7) (undo-tree-id446 . -7) (undo-tree-id447 . -7) (undo-tree-id448 . -7) (undo-tree-id449 . -7) (undo-tree-id450 . -7) (undo-tree-id451 . -7) (undo-tree-id452 . -7) (undo-tree-id453 . -6) (undo-tree-id454 . -6) (undo-tree-id455 . -6) (undo-tree-id456 . -6) (undo-tree-id457 . -6) (undo-tree-id458 . -6) (undo-tree-id459 . -6) (undo-tree-id460 . -6) (undo-tree-id461 . -6) (undo-tree-id462 . -6) (undo-tree-id463 . -6) (undo-tree-id464 . -6) (undo-tree-id465 . -6) (undo-tree-id466 . -6) (undo-tree-id467 . -6) (undo-tree-id468 . -6) (undo-tree-id469 . -6) (undo-tree-id470 . -6) (undo-tree-id471 . -6) (undo-tree-id472 . -6) (undo-tree-id473 . -6) (undo-tree-id474 . -6) (undo-tree-id475 . -5) (undo-tree-id476 . -5) (undo-tree-id477 . -5) (undo-tree-id478 . -5) (undo-tree-id479 . -5) (undo-tree-id480 . -5) (undo-tree-id481 . -5) (undo-tree-id482 . -5) (undo-tree-id483 . -4) (undo-tree-id484 . -4) (undo-tree-id485 . -4) (undo-tree-id486 . -4) (undo-tree-id487 . -4) (undo-tree-id488 . -4) (undo-tree-id489 . -4) (undo-tree-id490 . -4) (undo-tree-id491 . -3) (undo-tree-id492 . -3) (undo-tree-id493 . -3) (undo-tree-id494 . -3) (undo-tree-id495 . -3) (undo-tree-id496 . -3) (undo-tree-id497 . -3) (undo-tree-id498 . -3) (undo-tree-id499 . -2) (undo-tree-id500 . -2) (undo-tree-id501 . -2) (undo-tree-id502 . -2) (undo-tree-id503 . -2) (undo-tree-id504 . -2) (undo-tree-id505 . -2) (undo-tree-id506 . -2) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -7) (undo-tree-id537 . -7) (undo-tree-id538 . -7) (undo-tree-id539 . -7) (undo-tree-id540 . -7) (undo-tree-id541 . -7) (undo-tree-id542 . -7) (undo-tree-id543 . -7) (undo-tree-id544 . -7) (undo-tree-id545 . -7) (undo-tree-id546 . -7) (undo-tree-id547 . -7) (undo-tree-id548 . -7) (undo-tree-id549 . -7) (undo-tree-id550 . -7) (undo-tree-id551 . -7) (undo-tree-id552 . -7) (undo-tree-id553 . -7) (undo-tree-id554 . -7) (undo-tree-id555 . -7) (undo-tree-id556 . -7) (undo-tree-id557 . -7) (undo-tree-id558 . -7) (undo-tree-id559 . -7) (undo-tree-id560 . -7) (undo-tree-id561 . -7) (undo-tree-id562 . -7) (undo-tree-id563 . -7) (undo-tree-id564 . -7) (undo-tree-id565 . -7) (undo-tree-id566 . -7) (undo-tree-id567 . -7) (undo-tree-id568 . -7) (undo-tree-id569 . -7) (undo-tree-id570 . -7) (undo-tree-id571 . -7) (undo-tree-id572 . -8) (undo-tree-id573 . -8) (undo-tree-id574 . -8) (undo-tree-id575 . -8) (undo-tree-id576 . -8) (undo-tree-id577 . -8) (undo-tree-id578 . -8) (undo-tree-id579 . -8) (undo-tree-id580 . -8) (undo-tree-id581 . -8) (undo-tree-id582 . -8) (undo-tree-id583 . -8) (undo-tree-id584 . -8) (undo-tree-id585 . -8) (undo-tree-id586 . -8) (undo-tree-id587 . -8) (undo-tree-id588 . -8) (undo-tree-id589 . -8) (undo-tree-id590 . -8) (undo-tree-id591 . -8) (undo-tree-id592 . -8) (undo-tree-id593 . -8) (undo-tree-id594 . -9) (undo-tree-id595 . -9) (undo-tree-id596 . -9) (undo-tree-id597 . -9) (undo-tree-id598 . -9) (undo-tree-id599 . -9) (undo-tree-id600 . -9) (undo-tree-id601 . -9) (undo-tree-id602 . -9) (undo-tree-id603 . -9) (undo-tree-id604 . -9) (undo-tree-id605 . -9) (undo-tree-id606 . -9) (undo-tree-id607 . -9) (undo-tree-id608 . -9) (undo-tree-id609 . -9) (undo-tree-id610 . -9) (undo-tree-id611 . -9) (undo-tree-id612 . -9) (undo-tree-id613 . -9) (undo-tree-id614 . -9) (undo-tree-id615 . -9) (undo-tree-id616 . -9) (undo-tree-id617 . -9) (undo-tree-id618 . -9) (undo-tree-id619 . -9) (undo-tree-id620 . -9) (undo-tree-id621 . -9) (undo-tree-id622 . -9) (undo-tree-id623 . -9) (undo-tree-id624 . -9) (undo-tree-id625 . -9) (undo-tree-id626 . -7) (undo-tree-id627 . -9) (undo-tree-id628 . -9) (undo-tree-id629 . -9) (undo-tree-id630 . -9) (undo-tree-id631 . -9) (undo-tree-id632 . -9) (undo-tree-id633 . -10) 47172 (t 26063 7810 366064 297000)) nil (26063 7824 902720 255000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -47163) (undo-tree-id357 . 1) (undo-tree-id358 . 1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) 47164) nil (26063 7824 902527 173000) 0 nil])
([nil nil ((46139 . 46151) (46118 . 46139) (46111 . 46118) (#("    " 0 4 (fontified t)) . -46111) (undo-tree-id0 . -4) (undo-tree-id1 . -4) (undo-tree-id2 . -4) (undo-tree-id3 . -4) (undo-tree-id4 . -4) (undo-tree-id5 . -4) (undo-tree-id6 . -4) (undo-tree-id7 . -4) (undo-tree-id8 . -4) (undo-tree-id9 . -4) (undo-tree-id10 . -4) (undo-tree-id11 . -4) (undo-tree-id12 . -4) (undo-tree-id13 . -4) (undo-tree-id14 . -4) (undo-tree-id15 . -4) (undo-tree-id16 . -4) (undo-tree-id17 . -4) (undo-tree-id18 . -4) (undo-tree-id19 . -4) (undo-tree-id20 . -4) (undo-tree-id21 . -4) (undo-tree-id22 . -4) (undo-tree-id23 . -4) (undo-tree-id24 . -4) (undo-tree-id25 . -4) (undo-tree-id26 . -4) 46115 (46094 . 46115) (46047 . 46051) 46051 (46026 . 46030) (46009 . 46026) (t 26063 7824 912730 236000)) nil (26069 55058 552308 391000) 0 nil])
([nil nil ((apply -2 46766 46874 undo--wrap-and-run-primitive-undo 46766 46874 ((46790 . 46792) 46835))) nil (26069 55058 552283 631000) 0 nil])
([nil nil ((54942 . 54945) (t 26069 55058 596021 937000)) nil (26094 54383 978545 191000) 0 nil])
([nil nil ((nil rear-nonsticky nil 54943 . 54944) (#("
" 0 1 (fontified nil)) . -56810) (54943 . 56811)) nil (26094 54383 978541 288000) 0 nil])
([nil nil ((54942 . 54944) (t 26094 54383 989421 613000)) nil (26094 54451 279721 416000) 0 nil])
([nil nil ((nil rear-nonsticky nil 54944 . 54945) (#("
" 0 1 (fontified nil)) . -55804) (54944 . 55805)) nil (26094 54451 279720 113000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . 54944) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1)) nil (26094 54451 279716 855000) 0 nil])
([nil nil ((apply -40 3130 3921 undo--wrap-and-run-primitive-undo 3130 3921 ((3898 . 3900) (3843 . 3845) (3809 . 3811) (3774 . 3776) (3743 . 3745) (3714 . 3716) (3643 . 3645) (3585 . 3587) (3553 . 3555) (3529 . 3531) (3497 . 3499) (3465 . 3467) (3435 . 3437) (3412 . 3414) (3351 . 3353) (3310 . 3312) (3267 . 3269) (3228 . 3230) (3189 . 3191) (3130 . 3132) 3880))) nil (26106 48074 370120 36000) 0 nil])
([nil nil ((48981 . 48985) (t 26106 48074 416560 258000)) nil (26106 52342 370196 396000) 0 nil])
([nil nil ((57716 . 57717) (57716 . 57717) (t 26106 52342 379968 605000)) nil (26108 5748 845981 662000) 0 nil])
([nil nil ((nil rear-nonsticky nil 57717 . 57718) (#("
" 0 1 (fontified nil)) . -59173) (57717 . 59174)) nil (26108 5748 845978 169000) 0 nil])
([nil nil ((59174 . 59176) (t 26108 5748 855921 534000)) nil (26108 6957 868784 213000) 0 nil])
([nil nil ((nil rear-nonsticky nil 59175 . 59176) (#("
" 0 1 (fontified nil)) . -60212) (59175 . 60213)) nil (26108 6957 868783 752000) 0 nil])
([nil nil ((#("def rasterToPoints(bildo_, column_names, epsg, output=None, driver=\"GPKG\", navalue=0):
    xtl, xres, xtr, ytl, ytr, yres = bildo_.geotransform
    ndim, nrows, ncols = bildo_.dims
    total = ndim*nrows*ncols

    xcoords = np.arange(xtl, xtl+(ncols*xres), xres)+np.abs(xres/2)
    ycoords = np.arange(ytl, ytl+(nrows*yres), yres)+np.abs(yres/2)
    mesh = np.meshgrid(xcoords, ycoords)
    coordinates = np.concatenate([mesh[i].reshape(-1,1) for i in [0,1]], axis=1)

    bandinfo = bandsToColumns(bildo_.arrays.values)

    columns = [\"X\", \"Y\"] + column_names
    xyband = np.concatenate([coordinates, bandinfo], axis=1)
    df = pd.DataFrame(xyband, columns=columns)
    geodf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df.X, df.Y), crs=epsgToCrsWkt(epsg))
    geodf = geodf[geodf.auc != navalue]
    if output is not None:
        geodf.to_file(output, driver=driver)
    return geodf

" 0 3 (face tree-sitter-hl-face:keyword fontified t) 3 4 (fontified t) 4 18 (face tree-sitter-hl-face:function fontified t) 18 19 (face (rainbow-delimiters-depth-1-face) fontified t) 19 25 (face tree-sitter-hl-face:variable.parameter fontified t) 25 27 (fontified t) 27 39 (face tree-sitter-hl-face:variable.parameter fontified t) 39 41 (fontified t) 41 45 (face tree-sitter-hl-face:variable.parameter fontified t) 45 47 (fontified t) 47 53 (face tree-sitter-hl-face:variable.parameter fontified t) 53 54 (face tree-sitter-hl-face:operator fontified t) 54 58 (face tree-sitter-hl-face:constant.builtin fontified t) 58 60 (fontified t) 60 66 (face tree-sitter-hl-face:variable.parameter fontified t) 66 67 (face tree-sitter-hl-face:operator fontified t) 67 68 (face tree-sitter-hl-face:string fontified t) 68 72 (face tree-sitter-hl-face:string fontified t) 72 73 (face tree-sitter-hl-face:string fontified t) 73 75 (fontified t) 75 82 (face tree-sitter-hl-face:variable.parameter fontified t) 82 83 (face tree-sitter-hl-face:operator fontified t) 83 84 (face tree-sitter-hl-face:number fontified t) 84 85 (face (rainbow-delimiters-depth-1-face) fontified t) 85 91 (fontified t) 91 94 (face tree-sitter-hl-face:variable fontified t) 94 96 (fontified t) 96 100 (face tree-sitter-hl-face:variable fontified t) 100 102 (fontified t) 102 105 (face tree-sitter-hl-face:variable fontified t) 105 107 (fontified t) 107 110 (face tree-sitter-hl-face:variable fontified t) 110 112 (fontified t) 112 115 (face tree-sitter-hl-face:variable fontified t) 115 117 (fontified t) 117 121 (face tree-sitter-hl-face:variable fontified t) 121 122 (fontified t) 122 123 (face tree-sitter-hl-face:operator fontified t) 123 131 (fontified t) 131 143 (face tree-sitter-hl-face:property fontified t) 143 148 (fontified t) 148 152 (face tree-sitter-hl-face:variable fontified t) 152 154 (fontified t) 154 159 (face tree-sitter-hl-face:variable fontified t) 159 161 (fontified t) 161 166 (face tree-sitter-hl-face:variable fontified t) 166 167 (fontified t) 167 168 (face tree-sitter-hl-face:operator fontified t) 168 176 (fontified t) 176 180 (face tree-sitter-hl-face:property fontified t) 180 185 (fontified t) 185 190 (face tree-sitter-hl-face:variable fontified t) 190 191 (fontified t) 191 192 (face tree-sitter-hl-face:operator fontified t) 192 197 (fontified t) 197 198 (face tree-sitter-hl-face:operator fontified t) 198 203 (fontified t) 203 204 (face tree-sitter-hl-face:operator fontified t) 204 215 (fontified t) 215 222 (face tree-sitter-hl-face:variable fontified t) 222 223 (fontified t) 223 224 (face tree-sitter-hl-face:operator fontified t) 224 228 (fontified t) 228 234 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 234 235 (face (rainbow-delimiters-depth-1-face) fontified t) 235 243 (fontified t) 243 244 (face tree-sitter-hl-face:operator fontified t) 244 245 (face (rainbow-delimiters-depth-2-face) fontified t) 245 250 (fontified t) 250 251 (face tree-sitter-hl-face:operator fontified t) 251 255 (fontified t) 255 256 (face (rainbow-delimiters-depth-2-face) fontified t) 256 262 (fontified t) 262 263 (face (rainbow-delimiters-depth-1-face) fontified t) 263 264 (face tree-sitter-hl-face:operator fontified t) 264 267 (fontified t) 267 270 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 270 271 (face (rainbow-delimiters-depth-1-face) fontified t) 271 275 (fontified t) 275 276 (face tree-sitter-hl-face:operator fontified t) 276 277 (face tree-sitter-hl-face:number fontified t) 277 278 (face (rainbow-delimiters-depth-1-face) fontified t) 278 283 (fontified t) 283 290 (face tree-sitter-hl-face:variable fontified t) 290 291 (fontified t) 291 292 (face tree-sitter-hl-face:operator fontified t) 292 296 (fontified t) 296 302 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 302 303 (face (rainbow-delimiters-depth-1-face) fontified t) 303 311 (fontified t) 311 312 (face tree-sitter-hl-face:operator fontified t) 312 313 (face (rainbow-delimiters-depth-2-face) fontified t) 313 318 (fontified t) 318 319 (face tree-sitter-hl-face:operator fontified t) 319 323 (fontified t) 323 324 (face (rainbow-delimiters-depth-2-face) fontified t) 324 330 (fontified t) 330 331 (face (rainbow-delimiters-depth-1-face) fontified t) 331 332 (face tree-sitter-hl-face:operator fontified t) 332 335 (fontified t) 335 338 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 338 339 (face (rainbow-delimiters-depth-1-face) fontified t) 339 343 (fontified t) 343 344 (face tree-sitter-hl-face:operator fontified t) 344 345 (face tree-sitter-hl-face:number fontified t) 345 346 (face (rainbow-delimiters-depth-1-face) fontified t) 346 351 (fontified t) 351 355 (face tree-sitter-hl-face:variable fontified t) 355 356 (fontified t) 356 357 (face tree-sitter-hl-face:operator fontified t) 357 361 (fontified t) 361 369 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 369 370 (face (rainbow-delimiters-depth-1-face) fontified t) 370 386 (fontified t) 386 387 (face (rainbow-delimiters-depth-1-face) fontified t) 387 392 (fontified t) 392 403 (face tree-sitter-hl-face:variable fontified t) 403 404 (fontified t) 404 405 (face tree-sitter-hl-face:operator fontified t) 405 409 (fontified t) 409 420 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 420 421 (face (rainbow-delimiters-depth-1-face) fontified t) 421 422 (face (rainbow-delimiters-depth-2-face) fontified t) 422 426 (fontified t) 426 427 (face (rainbow-delimiters-depth-3-face) fontified t) 427 428 (fontified t) 428 429 (face (rainbow-delimiters-depth-3-face) fontified t) 429 430 (fontified t) 430 437 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 437 438 (face (rainbow-delimiters-depth-3-face) fontified t) 438 439 (face tree-sitter-hl-face:operator fontified t) 439 440 (face tree-sitter-hl-face:number fontified t) 440 441 (fontified t) 441 442 (face tree-sitter-hl-face:number fontified t) 442 443 (face (rainbow-delimiters-depth-3-face) fontified t) 443 444 (fontified t) 444 447 (face tree-sitter-hl-face:keyword fontified t) 447 448 (fontified t) 448 449 (face tree-sitter-hl-face:variable fontified t) 449 450 (fontified t) 450 452 (face tree-sitter-hl-face:operator fontified t) 452 453 (fontified t) 453 454 (face (rainbow-delimiters-depth-3-face) fontified t) 454 455 (face tree-sitter-hl-face:number fontified t) 455 456 (fontified t) 456 457 (face tree-sitter-hl-face:number fontified t) 457 458 (face (rainbow-delimiters-depth-3-face) fontified t) 458 459 (face (rainbow-delimiters-depth-2-face) fontified t) 459 461 (fontified t) 461 465 (face tree-sitter-hl-face:label fontified t) 465 466 (face tree-sitter-hl-face:operator fontified t) 466 467 (face tree-sitter-hl-face:number fontified t) 467 468 (face (rainbow-delimiters-depth-1-face) fontified t) 468 474 (fontified t) 474 482 (face tree-sitter-hl-face:variable fontified t) 482 483 (fontified t) 483 484 (face tree-sitter-hl-face:operator fontified t) 484 485 (fontified t) 485 499 (face tree-sitter-hl-face:function.call fontified t) 499 500 (face (rainbow-delimiters-depth-1-face) fontified t) 500 507 (fontified t) 507 513 (face tree-sitter-hl-face:property fontified t) 513 514 (fontified t) 514 520 (face tree-sitter-hl-face:property fontified t) 520 521 (face (rainbow-delimiters-depth-1-face) fontified t) 521 527 (fontified t) 527 534 (face tree-sitter-hl-face:variable fontified t) 534 535 (fontified t) 535 536 (face tree-sitter-hl-face:operator fontified t) 536 537 (fontified t) 537 538 (face (rainbow-delimiters-depth-1-face) fontified t) 538 539 (face tree-sitter-hl-face:string fontified t) 539 540 (face tree-sitter-hl-face:string fontified t) 540 541 (face tree-sitter-hl-face:string fontified t) 541 543 (fontified t) 543 544 (face tree-sitter-hl-face:string fontified t) 544 545 (face tree-sitter-hl-face:string fontified t) 545 546 (face tree-sitter-hl-face:string fontified t) 546 547 (face (rainbow-delimiters-depth-1-face) fontified t) 547 548 (fontified t) 548 549 (face tree-sitter-hl-face:operator fontified t) 549 567 (fontified t) 567 573 (face tree-sitter-hl-face:variable fontified t) 573 574 (fontified t) 574 575 (face tree-sitter-hl-face:operator fontified t) 575 579 (fontified t) 579 590 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 590 591 (face (rainbow-delimiters-depth-1-face) fontified t) 591 592 (face (rainbow-delimiters-depth-2-face) fontified t) 592 613 (fontified t) 613 614 (face (rainbow-delimiters-depth-2-face) fontified t) 614 616 (fontified t) 616 620 (face tree-sitter-hl-face:label fontified t) 620 621 (face tree-sitter-hl-face:operator fontified t) 621 622 (face tree-sitter-hl-face:number fontified t) 622 623 (face (rainbow-delimiters-depth-1-face) fontified t) 623 628 (fontified t) 628 630 (face tree-sitter-hl-face:variable fontified t) 630 631 (fontified t) 631 632 (face tree-sitter-hl-face:operator fontified t) 632 636 (fontified t) 636 645 (face (tree-sitter-hl-face:constructor tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 645 646 (face (rainbow-delimiters-depth-1-face) fontified t) 646 654 (fontified t) 654 661 (face tree-sitter-hl-face:label fontified t) 661 662 (face tree-sitter-hl-face:operator fontified t) 662 669 (fontified t) 669 670 (face (rainbow-delimiters-depth-1-face) fontified t) 670 675 (fontified t) 675 680 (face tree-sitter-hl-face:variable fontified t) 680 681 (fontified t) 681 682 (face tree-sitter-hl-face:operator fontified t) 682 687 (fontified t) 687 699 (face (tree-sitter-hl-face:constructor tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 699 700 (face (rainbow-delimiters-depth-1-face) fontified t) 700 704 (fontified t) 704 712 (face tree-sitter-hl-face:label fontified t) 712 713 (face tree-sitter-hl-face:operator fontified t) 713 717 (fontified t) 717 731 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 731 732 (face (rainbow-delimiters-depth-2-face) fontified t) 732 735 (fontified t) 735 736 (face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor tree-sitter-hl-face:property) fontified t) 736 741 (fontified t) 741 742 (face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor tree-sitter-hl-face:property) fontified t) 742 743 (face (rainbow-delimiters-depth-2-face) fontified t) 743 745 (fontified t) 745 748 (face tree-sitter-hl-face:label fontified t) 748 749 (face tree-sitter-hl-face:operator fontified t) 749 761 (face tree-sitter-hl-face:function.call fontified t) 761 762 (face (rainbow-delimiters-depth-2-face) fontified t) 762 766 (fontified t) 766 767 (face (rainbow-delimiters-depth-2-face) fontified t) 767 768 (face (rainbow-delimiters-depth-1-face) fontified t) 768 773 (fontified t) 773 778 (face tree-sitter-hl-face:variable fontified t) 778 779 (fontified t) 779 780 (face tree-sitter-hl-face:operator fontified t) 780 786 (fontified t) 786 787 (face (rainbow-delimiters-depth-1-face) fontified t) 787 793 (fontified t) 793 796 (face tree-sitter-hl-face:property fontified t) 796 797 (fontified t) 797 799 (face tree-sitter-hl-face:operator fontified t) 799 807 (fontified t) 807 808 (face (rainbow-delimiters-depth-1-face) fontified t) 808 813 (fontified t) 813 815 (face tree-sitter-hl-face:keyword fontified t) 815 823 (fontified t) 823 825 (face tree-sitter-hl-face:operator fontified t) 825 826 (fontified t) 826 829 (face tree-sitter-hl-face:operator fontified t) 829 830 (fontified t) 830 834 (face tree-sitter-hl-face:constant.builtin fontified t) 834 850 (fontified t) 850 857 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 857 858 (face (rainbow-delimiters-depth-1-face) fontified t) 858 866 (fontified t) 866 872 (face tree-sitter-hl-face:label fontified t) 872 873 (face tree-sitter-hl-face:operator fontified t) 873 879 (fontified t) 879 880 (face (rainbow-delimiters-depth-1-face) fontified t) 880 885 (fontified t) 885 891 (face tree-sitter-hl-face:keyword fontified t) 891 898 (fontified t) 898 899 (fontified t)) . 58276) (undo-tree-id1 . -898) (undo-tree-id2 . -898) (undo-tree-id3 . -899) (undo-tree-id4 . -898) (undo-tree-id5 . -210) (undo-tree-id6 . -215) (undo-tree-id7 . -469) (undo-tree-id8 . -474) (undo-tree-id9 . -522) (undo-tree-id10 . -527) (undo-tree-id11 . -898) 59174) nil (26108 6957 868782 748000) 0 nil])
([nil current ((#("
" 0 1 (rear-nonsticky t fontified t)) . 58276) (undo-tree-id0 . -1)) nil (26108 6957 868776 87000) 0 nil])
nil
